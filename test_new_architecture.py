#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–æ—Ç–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞.
"""
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

async def test_architecture():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    """
    print("=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        print("‚úì –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        from src.main import ApplicationContainer
        print("  ‚úì ApplicationContainer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("‚úì –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        container = ApplicationContainer()
        print("  ‚úì –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("‚úì –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = container.get_config()
        config_dict = config.to_dict()
        print(f"  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(config_dict)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"  ‚úì Telegram token: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config_dict['telegram_token_set'] else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        print(f"  ‚úì API credentials: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' if config_dict['api_credentials']['email_set'] else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´'}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞
        print("‚úì –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞...")
        bot_service = container.get_bot_service()
        print("  ‚úì BotService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Excel –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("‚úì –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Excel –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        excel_processor = container._components['excel_processor']
        supported_columns = excel_processor.get_supported_column_names()
        print(f"  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(supported_columns['origin'])}")
        print(f"  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {len(supported_columns['destination'])}")
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("‚úì –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        result_generator = container._components['result_generator']
        supported_formats = result_generator.get_supported_formats()
        print(f"  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_formats)}")
        
        # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("‚úì –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        weight_categories = config.get_weight_categories()
        weight_kg = [f"{w/1000:.1f}–∫–≥" for w in weight_categories]
        print(f"  ‚úì –í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(weight_kg)}")
        
        # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("‚úì –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        log_settings = config.get_logging_settings()
        print(f"  ‚úì –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_settings['level']}")
        print(f"  ‚úì –§–∞–π–ª –ª–æ–≥–æ–≤: {log_settings['file_path']}")
        
        # –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
        print("‚úì –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
        from src.models.route import Route
        from src.models.shipping_calculation import ShippingOffer, WeightCategoryResult
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
        test_route = Route(origin="–ú–æ—Å–∫–≤–∞", destination="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", row_index=1)
        print(f"  ‚úì –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: {test_route.get_display_name()}")
        print(f"  ‚úì –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞: {test_route.is_valid()}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        test_offer = ShippingOffer(
            company_name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            price=500.0,
            delivery_days=3,
            tariff_name="–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            weight=1000
        )
        print(f"  ‚úì –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {test_offer.company_name} - {test_offer.price}‚ÇΩ")
        print(f"  ‚úì –¶–µ–Ω–∞ –∑–∞ –∫–≥: {test_offer.get_price_per_kg():.2f}‚ÇΩ")
        
        # –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞
        print("‚úì –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞...")
        api_client = container._components['api_client']
        is_authenticated = await api_client.is_authenticated()
        print(f"  ‚úì –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if is_authenticated else '–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}")
        
        # –¢–µ—Å—Ç 11: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        print("‚úì –¢–µ—Å—Ç 11: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await container.cleanup()
        print("  ‚úì –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    success = await test_architecture()
    
    if success:
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        print("   - TELEGRAM_BOT_TOKEN")
        print("   - TOPEX_EMAIL") 
        print("   - TOPEX_PASSWORD")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python src/main.py")
        print("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ README.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())