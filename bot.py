"""
Telegram bot implementation for processing Excel files with shipping routes.
"""
import logging
import asyncio
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from excel_processor import ExcelProcessor
from topex_api import TopExAPI
from config import Config
import tempfile

logger = logging.getLogger(__name__)

class TelegramBot:
    """Main Telegram bot class."""
    
    def __init__(self, config: Config):
        """Initialize the bot with configuration."""
        self.config = config
        self.application = Application.builder().token(config.telegram_token or "").build()
        self.excel_processor = ExcelProcessor()
        self.topex_api = TopExAPI(config)
        
        # Setup handlers
        self._setup_handlers()
        
    def _setup_handlers(self):
        """Setup bot command and message handlers."""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        welcome_message = """
üöö **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
2. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞" (–±–µ–∑ –≤–µ—Å–∞)
3. –ë–æ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–µ—Ä–Ω–µ—Ç Excel —Ñ–∞–π–ª —Å —Å–∞–º—ã–º–∏ –¥–µ—à–µ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏

**–í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** 0.5–∫–≥, 1–∫–≥, 2–∫–≥, 5–∫–≥, 10–∫–≥

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_message = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞:**
–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
‚Ä¢ –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –∫–æ–¥ –ö–õ–ê–î–†)
‚Ä¢ –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è (–∏–ª–∏ –∫–æ–¥ –ö–õ–ê–î–†)

**–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫:**
‚Ä¢ "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞"
‚Ä¢ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
‚Ä¢ "From", "To"

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
1. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: 0.5–∫–≥, 1–∫–≥, 2–∫–≥, 5–∫–≥, 10–∫–≥
2. –ù–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Excel —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏, —Ü–µ–Ω–µ –∏ —Å—Ä–æ–∫–∞—Ö

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: .xlsx, .xls
‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        """
        await update.message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)
        
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle document uploads."""
        document = update.message.document
        
        # Check file size
        if document.file_size > self.config.max_file_size:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.config.max_file_size // (1024*1024)}MB"
            )
            return
            
        # Check file extension
        if not document.file_name.lower().endswith(('.xlsx', '.xls')):
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)"
            )
            return
            
        # Send processing message
        processing_msg = await update.message.reply_text("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        try:
            # Download file
            file = await context.bot.get_file(document.file_id)
            
            # Create temporary file
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
                await file.download_to_drive(tmp_file.name)
                temp_file_path = tmp_file.name
                
            try:
                # Process Excel file
                await processing_msg.edit_text("üìã –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞...")
                shipping_data = self.excel_processor.process_file(temp_file_path)
                
                if not shipping_data:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ —Ñ–∞–π–ª–µ")
                    return
                    
                # Get shipping costs
                await processing_msg.edit_text("üí∞ –ü–æ–ª—É—á–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...")
                results = await self.get_shipping_costs(shipping_data)
                
                # Format and send results
                await processing_msg.edit_text("üì§ –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                await self.send_results(update, results)
                
            finally:
                # Clean up temporary file
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                    
        except Exception as e:
            logger.error(f"Error processing document: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages."""
        await update.message.reply_text(
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ '–û—Ç–∫—É–¥–∞' –∏ '–ö—É–¥–∞').\n"
            "–ë–æ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–µ—Ä–Ω–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞."
        )
        
    async def get_shipping_costs(self, shipping_data):
        """Get shipping costs for all routes with multiple weight categories."""
        results = []
        
        for i, route in enumerate(shipping_data, 1):
            try:
                route_result = {
                    'route_number': i,
                    'origin': route['origin'],
                    'destination': route['destination'],
                    'weight_results': {}
                }
                
                # Test each weight category
                for weight in self.config.weight_categories:
                    try:
                        # Add delay between requests to respect rate limits
                        await asyncio.sleep(self.config.rate_limit_delay)
                        
                        logger.info(f"Testing route {i} ({route['origin']} ‚Üí {route['destination']}) with weight {weight}g")
                        
                        # Get costs for this route and weight
                        costs = await self.topex_api.calculate_shipping_cost(
                            origin=route['origin'],
                            destination=route['destination'],
                            weight=weight
                        )
                        
                        # Find cheapest offer
                        cheapest_offer = self._find_cheapest_offer(costs)
                        
                        route_result['weight_results'][weight] = {
                            'cheapest_offer': cheapest_offer,
                            'all_offers': costs,
                            'error': None
                        }
                        
                    except Exception as e:
                        logger.error(f"Error calculating cost for route {i}, weight {weight}g: {e}")
                        route_result['weight_results'][weight] = {
                            'cheapest_offer': None,
                            'all_offers': None,
                            'error': str(e)
                        }
                
                results.append(route_result)
                
            except Exception as e:
                logger.error(f"Error processing route {i}: {e}")
                results.append({
                    'route_number': i,
                    'origin': route['origin'],
                    'destination': route['destination'],
                    'weight_results': {},
                    'error': str(e)
                })
                
        return results
    
    def _find_cheapest_offer(self, costs):
        """Find the cheapest offer from API response."""
        if not costs or not isinstance(costs, dict):
            return None
            
        cheapest = None
        min_price = float('inf')
        
        for offer_name, offer_details in costs.items():
            try:
                # Extract price from offer details string
                if '|' in str(offer_details):
                    parts = str(offer_details).split('|')
                    price_part = None
                    for part in parts:
                        if '–¶–µ–Ω–∞:' in part:
                            price_part = part
                            break
                    
                    if price_part:
                        # Extract numeric price
                        import re
                        price_match = re.search(r'(\d+\.?\d*)', price_part)
                        if price_match:
                            price = float(price_match.group(1))
                            if price < min_price:
                                min_price = price
                                
                                # Extract company, tariff, delivery days
                                company_parts = offer_name.split(' - ')
                                company = company_parts[0] if company_parts else offer_name
                                tariff = company_parts[1] if len(company_parts) > 1 else ''
                                
                                # Extract delivery days from details
                                delivery_days = ''
                                for part in parts:
                                    if '–°—Ä–æ–∫:' in part:
                                        delivery_days = part.replace('–°—Ä–æ–∫:', '').strip()
                                        break
                                
                                cheapest = {
                                    'company': company,
                                    'tariff': tariff,
                                    'price': price,
                                    'delivery_days': delivery_days,
                                    'full_offer': offer_name
                                }
            except Exception as e:
                logger.error(f"Error parsing offer {offer_name}: {e}")
                continue
        
        return cheapest
        
    async def send_results(self, update: Update, results):
        """Generate and send Excel file with results."""
        if not results:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        try:
            # Import the Excel generator
            from excel_generator import ExcelGenerator
            
            # Create summary message
            total_routes = len(results)
            successful_routes = len([r for r in results if not r.get('error')])
            
            summary = f"""üìä –§–æ—Ä–º–∏—Ä—É—é Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...

üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes}
‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_routes}
‚ùå –û—à–∏–±–æ–∫: {total_routes - successful_routes}

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([f'{w/1000:.1f}–∫–≥' for w in self.config.weight_categories])}"""
            
            # Send summary first
            status_msg = await update.message.reply_text(summary)
            
            # Generate Excel file
            excel_generator = ExcelGenerator()
            import tempfile
            import os
            
            # Create temporary file
            temp_dir = tempfile.gettempdir()
            timestamp = int(datetime.now().timestamp())
            output_filename = f"shipping_results_{timestamp}.xlsx"
            output_path = os.path.join(temp_dir, output_filename)
            
            # Generate the Excel file
            excel_generator.generate_results_file(results, output_path)
            
            # Update status
            await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é Excel —Ñ–∞–π–ª...")
            
            # Send the Excel file
            with open(output_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Å—Ç–∞–≤–∫–∏_{timestamp}.xlsx",
                    caption="üìã –ì–æ—Ç–æ–≤–æ! Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
                )
            
            # Clean up temporary file
            if os.path.exists(output_path):
                os.unlink(output_path)
                
        except Exception as e:
            logger.error(f"Error generating Excel results: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
            

