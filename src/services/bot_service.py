"""
–°–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞.

–û—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º,
–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
- Single Responsibility Principle (SRP): –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
- Open/Closed Principle (OCP): –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
- Dependency Inversion Principle (DIP): –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
"""
import logging
import tempfile
import asyncio
from typing import Dict, Any, List
from datetime import datetime

from telegram import Update, InputFile
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ..interfaces.i_bot_service import IBotService
from ..interfaces.i_excel_processor import IExcelProcessor
from ..interfaces.i_api_client import IApiClient
from ..interfaces.i_result_generator import IResultGenerator
from ..interfaces.i_config import IConfig
from ..models.route import Route
from ..models.shipping_calculation import (
    ShippingOffer, WeightCategoryResult, RouteCalculationResult
)


logger = logging.getLogger(__name__)


class BotService(IBotService):
    """
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞.
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Excel —Ñ–∞–π–ª–æ–≤
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    
    def __init__(
        self,
        config: IConfig,
        excel_processor: IExcelProcessor,
        api_client: IApiClient,
        result_generator: IResultGenerator
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞ —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        
        Args:
            config (IConfig): –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            excel_processor (IExcelProcessor): –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Excel —Ñ–∞–π–ª–æ–≤
            api_client (IApiClient): –ö–ª–∏–µ–Ω—Ç API –¥–æ—Å—Ç–∞–≤–∫–∏
            result_generator (IResultGenerator): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        self._config = config
        self._excel_processor = excel_processor
        self._api_client = api_client
        self._result_generator = result_generator
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._file_settings = self._config.get_file_processing_settings()
        self._weight_categories = self._config.get_weight_categories()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._stats = {
            'total_files_processed': 0,
            'total_routes_calculated': 0,
            'total_api_calls': 0,
            'start_time': datetime.now()
        }
        
        logger.info("BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
    
    async def handle_start_command(self, update, context) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
        
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        try:
            user_id = update.effective_user.id if update.effective_user else "unknown"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
            
            welcome_message = self._create_welcome_message()
            
            await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            # await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    
    async def handle_help_command(self, update, context) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
        
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        try:
            user_id = update.effective_user.id if update.effective_user else "unknown"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
            
            help_message = self._create_help_message()
            
            await update.message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
    
    async def handle_document(self, update, context) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (Excel —Ñ–∞–π–ª—ã).
        
        –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª
        2. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        4. –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        document = update.message.document if update.message else None
        user_id = update.effective_user.id if update.effective_user else "unknown"
        
        if not document:
            logger.error("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {document.file_name if document.file_name else '–±–µ–∑ –∏–º–µ–Ω–∏'}")
        
        try:
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            validation_result = await self._validate_uploaded_file(document)
            if not validation_result['valid']:
                # await update.message.reply_text(validation_result['error_message'])
                return
            
            # –®–∞–≥ 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
            
            # –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            routes_data = await self._download_and_process_file(document, context)
            if not routes_data:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
                return
                
            await processing_msg.edit_text(
                f"üìã –ù–∞–π–¥–µ–Ω–æ {len(routes_data)} –º–∞—Ä—à—Ä—É—Ç–æ–≤. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏..."
            )
            
            # –®–∞–≥ 4: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            calculation_results = await self.process_shipping_calculation(routes_data)
            
            # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_file_path = await self._generate_result_file(calculation_results)
            
            # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self._send_results_to_user(update, result_file_path, calculation_results)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._stats['total_files_processed'] += 1
            self._stats['total_routes_calculated'] += len(routes_data)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # await self._send_error_message(update, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    async def handle_text_message(self, update, context) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —Å —Ç–µ–∫—Å—Ç–æ–º
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        try:
            user_id = update.effective_user.id if update.effective_user else "unknown"
            message_text = update.message.text if update.message else None
            
            if not message_text:
                logger.error("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return
                
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ
            response = self._analyze_text_message(message_text)
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def process_shipping_calculation(
        self, 
        routes_data: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤.
        
        –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞:
        1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç
        3. –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        4. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            routes_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        """
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è {len(routes_data)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        logger.info(f"–í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {self._weight_categories}")
        
        # –®–∞–≥ 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        routes_with_codes = await self._resolve_all_city_codes(routes_data)
        
        calculation_results = []
        total_calculations = len(routes_with_codes) * len(self._weight_categories)
        completed_calculations = 0
        
        for route_data in routes_with_codes:
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∞
                route = Route(
                    origin=route_data['origin'],
                    destination=route_data['destination'],
                    row_index=route_data['row_index']
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω—ã
                origin_code = route_data.get('origin_code')
                destination_code = route_data.get('destination_code')
                
                if not origin_code or not destination_code:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –º–∞—Ä—à—Ä—É—Ç {route.get_display_name()} - –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
                route_result = RouteCalculationResult(route=route)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for weight in self._weight_categories:
                    try:
                        logger.info(f"–†–∞—Å—á–µ—Ç –¥–ª—è {route.get_display_name()}, –≤–µ—Å {weight}–∫–≥")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
                        api_result = await self._api_client.calculate_shipping_cost_with_codes(
                            origin_code, destination_code, weight
                        )
                        
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç API –¥–ª—è {route.get_display_name()}: success={api_result.get('success', False)}")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        weight_result = self._process_api_result(api_result, weight)
                        route_result.add_weight_result(weight_result)
                        
                        completed_calculations += 1
                        self._stats['total_api_calls'] += 1
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
                        progress = (completed_calculations / total_calculations) * 100
                        if completed_calculations % max(1, total_calculations // 10) == 0:
                            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞: {progress:.1f}% ({completed_calculations}/{total_calculations})")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {route.get_display_name()}, –≤–µ—Å {weight}–∫–≥: {e}")
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                        error_result = WeightCategoryResult(weight=weight, calculation_error=str(e))
                        route_result.add_weight_result(error_result)
                
                calculation_results.append(route_result.to_dict())
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ {route_data}: {e}")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        summary = self._create_calculation_summary(calculation_results)
        
        result = {
            'success': True,
            'results': calculation_results,
            'summary': summary,
            'total_routes': len(routes_data),
            'processed_routes': len(calculation_results),
            'total_api_calls': self._stats['total_api_calls'],
            'calculation_time': datetime.now().isoformat()
        }
        
        logger.info(f"–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(calculation_results)} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return result
    
    async def start_bot(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã.
        """
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._config.validate_configuration():
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
            if not await self._api_client.authenticate():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ API –¥–æ—Å—Ç–∞–≤–∫–∏")
                raise ValueError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API")
            
            logger.info("–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop_bot(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
        """
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            await self._api_client.close()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            runtime = datetime.now() - self._stats['start_time']
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
            logger.info(f"- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}")
            logger.info(f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self._stats['total_files_processed']}")
            logger.info(f"- –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {self._stats['total_routes_calculated']}")
            logger.info(f"- –í—ã–∑–æ–≤–æ–≤ API: {self._stats['total_api_calls']}")
            
            logger.info("–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞: {e}")
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
    
    def _create_welcome_message(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        weight_categories = [f"{w:.1f}–∫–≥" for w in self._weight_categories]
        weights_text = ", ".join(weight_categories)
        
        return f"""
üöö **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
2. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞" (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Å–∞)
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç {len(self._weight_categories)} –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
4. –ü–æ–ª—É—á–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ—Å–∞

**–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {weights_text}

**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {self._file_settings['max_file_size'] // (1024*1024)}MB

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
        """.strip()
    
    def _create_help_message(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help.
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        supported_columns = self._excel_processor.get_supported_column_names()
        origin_examples = ", ".join(f'"{col}"' for col in supported_columns['origin'][:5])
        destination_examples = ", ".join(f'"{col}"' for col in supported_columns['destination'][:5])
        
        return f"""
üìã **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ Excel —Ñ–∞–π–ª—É:**
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: .xlsx, .xls
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self._file_settings['max_file_size'] // (1024*1024)}MB
‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {origin_examples} –∏ –¥—Ä.
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination_examples} –∏ –¥—Ä.

**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
1. –ë–æ—Ç —á–∏—Ç–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–æ {len(self._weight_categories)} –≤–µ—Å–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
3. –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
4. –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ—Å–∞
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

**–í–∞–∂–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ - –æ–Ω —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤, —Ç–∞–∫ –∏ –∫–æ–¥—ã –ö–õ–ê–î–†
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.
        """.strip()
    
    def _analyze_text_message(self, message_text: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
        
        Args:
            message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        message_lower = message_text.lower().strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å']):
            return "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        
        elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '–∫–∞–∫']):
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º."
        
        elif any(word in message_lower for word in ['—Å—Ç–∞—Ç—É—Å', '—Ä–∞–±–æ—Ç–∞', '–¥–æ—Å—Ç—É–ø–µ–Ω']):
            uptime = datetime.now() - self._stats['start_time']
            return f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self._stats['total_files_processed']}."
        
        else:
            return ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. "
                   "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.")
    
    async def _validate_uploaded_file(self, document) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª.
        
        Args:
            document: –û–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç Telegram
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if document.file_size > self._file_settings['max_file_size']:
            max_size_mb = self._file_settings['max_file_size'] // (1024*1024)
            return {
                'valid': False,
                'error_message': f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb}MB"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not document.file_name.lower().endswith(tuple(self._file_settings['allowed_extensions'])):
            extensions = ', '.join(self._file_settings['allowed_extensions'])
            return {
                'valid': False,
                'error_message': f"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: {extensions}"
            }
        
        return {'valid': True}
    
    async def _download_and_process_file(self, document, context) -> List[Dict[str, Any]]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª.
        
        Args:
            document: –û–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            List[Dict[str, Any]]: –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
                await file.download_to_drive(tmp_file.name)
                temp_file_path = tmp_file.name
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª
                routes_data = self._excel_processor.process_file(temp_file_path)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(routes_data)} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
                return routes_data
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.unlink(temp_file_path)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def _process_api_result(self, api_result: Dict[str, Any], weight: float) -> WeightCategoryResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –≤ –æ–±—ä–µ–∫—Ç WeightCategoryResult.
        
        Args:
            api_result (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API
            weight (float): –í–µ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
            
        Returns:
            WeightCategoryResult: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –≤ –≥—Ä–∞–º–º—ã –¥–ª—è WeightCategoryResult
        weight_in_grams = int(weight * 1000)
        weight_result = WeightCategoryResult(weight=weight_in_grams)
        
        if api_result.get('success'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            offers_data = api_result.get('offers', [])
            
            for offer_data in offers_data:
                try:
                    offer = ShippingOffer(
                        company_name=offer_data.get('company_name', ''),
                        price=float(offer_data.get('price', 0)),
                        delivery_days=int(offer_data.get('delivery_days', 0)),
                        tariff_name=offer_data.get('tariff_name', ''),
                        weight=weight_in_grams,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
                        additional_info=offer_data.get('additional_info', {})
                    )
                    weight_result.add_offer(offer)
                    
                except (ValueError, TypeError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                    continue
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
            weight_result.calculation_error = api_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
        
        return weight_result
    
    def _create_calculation_summary(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞.
        
        Args:
            results (List[Dict[str, Any]]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
            
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        successful_routes = sum(1 for r in results if r.get('is_successful', False))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–µ—Å–∞–º
        weight_stats = {}
        for result in results:
            weight_results = result.get('weight_results', {})
            for weight, weight_data in weight_results.items():
                if weight not in weight_stats:
                    weight_stats[weight] = {'successful': 0, 'total': 0}
                
                weight_stats[weight]['total'] += 1
                if weight_data.get('has_offers'):
                    weight_stats[weight]['successful'] += 1
        
        return {
            'total_routes': len(results),
            'successful_routes': successful_routes,
            'success_rate': (successful_routes / len(results) * 100) if results else 0,
            'weight_statistics': weight_stats,
            'processing_time': datetime.now().isoformat()
        }
    
    async def _generate_result_file(self, calculation_results: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞.
        
        Args:
            calculation_results (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            results_data = calculation_results.get('results', [])
            result_file_path = self._result_generator.generate_result_file(
                results_data, 
                output_format='xlsx'
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result_file_path}")
            return result_file_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            raise
    
    async def _send_results_to_user(self, update, result_file_path: str, results: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            result_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not self._validate_result_file(result_file_path):
                logger.error(f"–§–∞–π–ª {result_file_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞—é CSV")
                # –°–æ–∑–¥–∞–µ–º CSV –∫–∞–∫ fallback
                csv_path = await self._create_csv_fallback(results)
                result_file_path = csv_path
            
            summary = results.get('summary', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Ç–∫–∏–º –æ—Ç—á–µ—Ç–æ–º
            report_text = f"""
‚úÖ **–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {summary.get('total_routes', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {summary.get('successful_routes', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary.get('success_rate', 0):.1f}%
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ API: {results.get('total_api_calls', 0)}

üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º Excel —Ñ–∞–π–ª–µ.
            """.strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ MIME-—Ç–∏–ø
            if result_file_path.endswith('.csv'):
                filename = "shipping_results.csv"
                report_text += "\n\nüìù *–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*"
            else:
                filename = "shipping_results.xlsx"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            with open(result_file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename=filename,
                    caption=report_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                import os
                os.unlink(result_file_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {result_file_path}")
            except Exception as cleanup_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {result_file_path}: {cleanup_error}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass
    
    def _validate_result_file(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        try:
            from pathlib import Path
            
            file_obj = Path(file_path)
            if not file_obj.exists():
                logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return False
            
            file_size = file_obj.stat().st_size
            if file_size < 1000:  # Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1KB
                logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Excel —Ñ–∞–π–ª
            if file_path.endswith('.xlsx'):
                try:
                    from openpyxl import load_workbook
                    wb = load_workbook(file_path, read_only=True)
                    ws = wb.active
                    if ws.max_row < 2:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –¥–∞–Ω–Ω—ã–µ
                        logger.error("Excel —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                        return False
                    wb.close()
                    logger.info(f"Excel —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {file_size} –±–∞–π—Ç, {ws.max_row} —Å—Ç—Ä–æ–∫")
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    async def _create_csv_fallback(self, results: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ Excel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
        
        Args:
            results (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        """
        try:
            results_data = results.get('results', [])
            csv_path = self._result_generator.generate_result_file(
                results_data, 
                output_format='csv'
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω CSV —Ñ–∞–π–ª –∫–∞–∫ fallback: {csv_path}")
            return csv_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV fallback: {e}")
            raise
    
    async def _resolve_all_city_codes(self, routes_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
        
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ª—É—á–∞—è –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
        –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–µ—Å.
        
        Args:
            routes_data (List[Dict[str, Any]]): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            
        Returns:
            List[Dict[str, Any]]: –ú–∞—Ä—à—Ä—É—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
        """
        logger.info("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞—é –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        unique_cities = set()
        for route_data in routes_data:
            unique_cities.add(route_data['origin'])
            unique_cities.add(route_data['destination'])
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_cities)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ä–µ–∑–æ–ª–≤–∞")
        
        # –ö–µ—à –¥–ª—è –∫–æ–¥–æ–≤ –≥–æ—Ä–æ–¥–æ–≤
        city_codes_cache = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        for city in unique_cities:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ API –∫–ª–∏–µ–Ω—Ç–∞
                city_code = await self._api_client._resolve_city_code(city)
                city_codes_cache[city] = city_code
                
                if city_code:
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}': {city_code}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}': {e}")
                city_codes_cache[city] = None
        
        # –û–±–æ–≥–∞—â–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∫–æ–¥–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
        routes_with_codes = []
        for route_data in routes_data:
            enhanced_route = route_data.copy()
            enhanced_route['origin_code'] = city_codes_cache.get(route_data['origin'])
            enhanced_route['destination_code'] = city_codes_cache.get(route_data['destination'])
            routes_with_codes.append(enhanced_route)
        
        successful_routes = sum(1 for r in routes_with_codes 
                              if r.get('origin_code') and r.get('destination_code'))
        
        logger.info(f"–ö–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã: {successful_routes}/{len(routes_data)} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—á–µ—Ç—É")
        
        return routes_with_codes
    
    # async def _send_error_message(self, update, error_message: str) -> None:
    #     """
    #     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
    #     Args:
    #         update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    #         error_message (str): –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    #     """
    #     try:
    #         await update.message.reply_text(f"‚ùå {error_message}")
    #     except Exception as e:
    #         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")