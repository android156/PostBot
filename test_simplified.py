#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ telegram.ext
"""
import sys
import asyncio
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

async def test_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ telegram.ext"""
    print("=== –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ===")
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
        print("‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from src.implementations.config_manager import ConfigManager
        config = ConfigManager()
        print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤–∞–ª–∏–¥–Ω–∞: {config.validate_configuration()}")
        
        print("‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        from src.implementations.excel_processor import ExcelProcessor
        excel_processor = ExcelProcessor()
        columns = excel_processor.get_supported_column_names()
        print(f"  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {len(columns['origin'])} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, {len(columns['destination'])} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        
        print("‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...")
        from src.implementations.topex_api_client import TopExApiClient
        api_client = TopExApiClient(config)
        print(f"  API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {await api_client.is_authenticated()}")
        
        print("‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        from src.implementations.result_generator import ExcelResultGenerator
        result_generator = ExcelResultGenerator()
        formats = result_generator.get_supported_formats()
        print(f"  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}")
        
        print("‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
        from src.models.route import Route
        from src.models.shipping_calculation import ShippingOffer
        
        route = Route("–ú–æ—Å–∫–≤–∞", "–°–ü–±", 1)
        offer = ShippingOffer("–°–î–≠–ö", 500.0, 2, "–°—Ç–∞–Ω–¥–∞—Ä—Ç", 1000)
        print(f"  –ú–∞—Ä—à—Ä—É—Ç: {route.get_display_name()}, –≤–∞–ª–∏–¥–µ–Ω: {route.is_valid()}")
        print(f"  –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {offer.company_name} - {offer.price}‚ÇΩ –∑–∞ {offer.delivery_days} –¥–Ω–µ–π")
        
        await api_client.close()
        print("\n‚úÖ –í–°–ï –ë–ê–ó–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_components())
    if success:
        print("\nüöÄ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!")
        print("üìã –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        sys.exit(1)