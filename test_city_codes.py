#!/usr/bin/env python3
"""
Test script to find correct city codes from the address book.
"""
import asyncio
import aiohttp
import json
from config import Config

async def test_city_codes():
    """Test to find correct city codes from the address book."""
    config = Config()
    
    async with aiohttp.ClientSession() as session:
        # Step 1: Authenticate
        auth_url = "https://lk.top-ex.ru/api/auth"
        auth_params = {
            'email': config.topex_email,
            'password': config.topex_password
        }
        
        print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        async with session.get(auth_url, params=auth_params) as response:
            if response.status == 200:
                auth_data = await response.json()
                if auth_data.get('status'):
                    auth_token = auth_data.get('authToken')
                    print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    
                    # Step 2: Get address book entries to find city codes
                    print("\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–∏...")
                    address_url = "https://lk.top-ex.ru/api/addressBook/list"
                    address_params = {
                        'authToken': auth_token,
                        'type': 'express',
                        'pageSize': 20  # –ü–æ–ª—É—á–∏–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π
                    }
                    
                    async with session.get(address_url, params=address_params) as addr_response:
                        if addr_response.status == 200:
                            addr_data = await addr_response.json()
                            if addr_data.get('status') and addr_data.get('items'):
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(addr_data['items'])} –∑–∞–ø–∏—Å–µ–π")
                                
                                # –°–æ–±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤
                                city_codes = set()
                                for item in addr_data['items']:
                                    city_code = item.get('city')
                                    if city_code:
                                        city_codes.add(city_code)
                                
                                print(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(city_codes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –≥–æ—Ä–æ–¥–æ–≤")
                                
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                test_codes = list(city_codes)[:2]
                                if len(test_codes) >= 2:
                                    sender_code = test_codes[0]
                                    recipient_code = test_codes[1]
                                    
                                    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤:")
                                    print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_code}")
                                    print(f"   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_code}")
                                    
                                    # Step 3: Test calculation with real city codes
                                    calc_url = "https://lk.top-ex.ru/api/cse/calc"
                                    test_params = {
                                        'authToken': auth_token,
                                        'attributes[user_id]': '14',
                                        'attributes[sender_city]': sender_code,
                                        'attributes[recipient_city]': recipient_code,
                                        'attributes[cargo_type]': '4aab1fc6-fc2b-473a-8728-58bcd4ff79ba',
                                        'attributes[cargo_seats_number]': '1',
                                        'attributes[cargo_weight]': '500'
                                    }
                                    
                                    print(f"\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏...")
                                    async with session.get(calc_url, params=test_params, timeout=30) as calc_response:
                                        print(f"üìà –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {calc_response.status}")
                                        
                                        if calc_response.status == 200:
                                            calc_data = await calc_response.json()
                                            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
                                            print(json.dumps(calc_data, indent=2, ensure_ascii=False))
                                            
                                            if calc_data.get('status'):
                                                print(f"\nüéâ –£–°–ü–ï–•! API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
                                                return True
                                            else:
                                                print(f"\n‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {calc_data.get('error', calc_data.get('errors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))}")
                                        else:
                                            error_text = await calc_response.text()
                                            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {calc_response.status}: {error_text[:200]}")
                                else:
                                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–µ")
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–∏: {addr_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–∏: {addr_response.status}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status}")
    
    return False

if __name__ == "__main__":
    asyncio.run(test_city_codes())