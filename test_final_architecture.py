#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –≤–µ—Å–∞ –∏ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º.
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_weight_units():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≤–µ—Å–∞–º–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö."""
    print("=== –¢–µ—Å—Ç –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞ ===")
    
    try:
        from implementations.config_manager import ConfigManager
        from models.shipping_calculation import ShippingOffer, WeightCategoryResult
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–µ—Å–æ–≤
        config = ConfigManager()
        weight_categories = config.get_weight_categories()
        print(f"–í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {weight_categories}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
        for weight in weight_categories:
            assert weight < 50, f"–í–µ—Å {weight} –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –∫–≥"
            assert weight > 0.1, f"–í–µ—Å {weight} –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º –¥–ª—è –∫–≥"
        
        print("‚úì –í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –≤–µ—Å–æ–º –≤ –∫–≥
        offer = ShippingOffer(
            company_name="–¢–µ—Å—Ç",
            price=500.0,
            delivery_days=2,
            tariff_name="–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            weight=1.5  # 1.5 –∫–≥
        )
        
        print(f"‚úì –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {offer.weight}–∫–≥ -> {offer.get_price_per_kg():.2f}‚ÇΩ/–∫–≥")
        
        # –¢–µ—Å—Ç –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        weight_result = WeightCategoryResult(weight=2.0)  # 2 –∫–≥
        weight_result.add_offer(offer)
        
        print(f"‚úì –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {weight_result.get_weight_kg()}–∫–≥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–µ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_api_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª–∏–µ–Ω—Ç —Å –∫–∏–ª–æ–≥—Ä–∞–º–º–∞–º–∏."""
    print("\n=== –¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞ ===")
    
    try:
        from implementations.config_manager import ConfigManager
        from implementations.topex_api_client import TopExApiClient
        
        config = ConfigManager()
        api_client = TopExApiClient(config)
        
        print("‚úì API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç.–∫. –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ç–∏)
        is_auth = await api_client.is_authenticated()
        print(f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {is_auth}")
        
        await api_client.close()
        print("‚úì API –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API: {e}")
        return False

async def test_full_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å."""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ===")
    
    try:
        from implementations.config_manager import ConfigManager
        from implementations.excel_processor import ExcelProcessor
        from implementations.result_generator import ExcelResultGenerator
        from models.route import Route
        from models.shipping_calculation import RouteCalculationResult
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config = ConfigManager()
        excel_processor = ExcelProcessor()
        result_generator = ExcelResultGenerator()
        
        print("‚úì –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        route = Route("–ú–æ—Å–∫–≤–∞", "–°–ü–±", 1)
        result = RouteCalculationResult(route)
        
        print(f"‚úì –ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω: {route.get_display_name()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = result_generator.get_supported_formats()
        print(f"‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        weights = config.get_weight_categories()
        weight_text = ", ".join([f"{w:.1f}–∫–≥" for w in weights])
        print(f"‚úì –í–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {weight_text}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
    print("=" * 60)
    
    tests = [
        test_weight_units,
        test_api_client, 
        test_full_workflow
    ]
    
    results = []
    for test in tests:
        result = await test()
        results.append(result)
    
    print("\n" + "=" * 60)
    
    if all(results):
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("  ‚Ä¢ –í–µ—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã")
        print("  ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SOLID —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("  ‚Ä¢ LSP –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("  ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        failed_count = len([r for r in results if not r])
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed_count} –∏–∑ {len(results)}")

if __name__ == "__main__":
    asyncio.run(main())